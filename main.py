# -*- coding: utf-8-*-
import traceback

import requests
from bs4 import BeautifulSoup



def dict_to_str(d, separator=' ', format='%s=%s'):
    """
    Creates string from dict keys and values
    :param dict d: source dict
    :param str separator: separator will separates key:value pairs
    :param str format: how to format each key:value pair
    :return:
    """
    if not d:
        return ''
    return separator.join(map(lambda pair: format % (pair[0], pair[1]), d.items()))

def correct_file_path(path):
    from re import sub
    return sub('[^-a-zA-Z0-9_.() ]+', '_', path)


def dump(resp, name):
    with open(name, 'w', encoding='utf-8') as file:
        file.write(resp.text)


def get_rusbonds(id):
    resp = requests.get('http://www.rusbonds.ru/srch_simple.asp?go=1&nick=%s&'
                        'emit=0&sec=0&status=&cat=0&per=0&rate=0&ctype=0&pvt=0&grnt=0&conv=0&'
                        'amm=0&bpog=&epog=&brazm=&erazm=&bvip=&evip=&brep=&erep=&bemis=&eemis=&bstav=&estav=&bcvol=&ecvol=' % id,
                        headers={'user-agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'})
    resp.raise_for_status()
    dump(resp, 'rusbonds_%s.html' % id)
    soup = BeautifulSoup(resp.text, 'lxml')
    found = list(filter(lambda tag: tag.attrs['href'].startswith('/ank_obl'), soup.select('td > a')))
    assert len(found) == 1
    return get_rusbonds_obl('http://www.rusbonds.ru' + found[0].attrs['href'])


def get_rusbonds_obl(url):
    resp = requests.get(url,
                        headers={'user-agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'})
    resp.raise_for_status()
    dump(resp, 'rusbonds_obl_%s.html' % correct_file_path(url))
    soup = BeautifulSoup(resp.text, 'lxml')
    found = list(filter(lambda tag: tag.attrs['href'].startswith('/ank_org'), soup.select('td > a')))
    assert len(found) == 1
    return get_rusbonds_org('http://www.rusbonds.ru' + found[0].attrs['href'])


def get_rusbonds_org(url):
    resp = requests.get(url,
                        headers={'user-agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'})
    resp.raise_for_status()
    resp.encoding = 'windows-1251'
    dump(resp, 'rusbonds_org_%s.html' % correct_file_path(url))
    soup = BeautifulSoup(resp.text, 'lxml')

    found = list(filter(lambda tag: tag.text.startswith('Наименование'), soup.select('tr')))
    assert len(found) == 1
    company = found[0].find_all('td')[1].text

    found = list(filter(lambda tag: tag.text.startswith('ИНН'), soup.select('tr')))
    assert len(found) == 1
    return dict(company=company, **get_google(found[0].find_all('td')[1].text.strip()))


def get_google(inn):
    resp = requests.get('https://www.google.ru/search?q=спарк+%s' % inn,
                        headers={'user-agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'})
    resp.raise_for_status()
    dump(resp, 'google_%s.html' % inn)

    soup = BeautifulSoup(resp.text, 'lxml')
    found = list(filter(lambda tag: 'www.spark-interfax.ru' in tag.attrs['href'], soup.select('h3 > a')))
    assert len(found) > 0
    return dict(inn=inn, **get_spark(found[0].attrs['href']))


def get_spark(url):
    resp = requests.get(url,
                        headers={'user-agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'})
    resp.raise_for_status()
    dump(resp, 'spark_%s.html' % correct_file_path(url))
    soup = BeautifulSoup(resp.text, 'lxml')
    value = soup.select('.company-params__value')
    if len(value) == 1:
        return dict(rating=value[0].text.replace(',', '.'))
    if len(value) == 2:
        return dict(place=value[0].text,
                    rating=value[1].text.replace(',', '.'))
    assert False

if __name__ == '__main__':
    # paste ISIN codes here and do replace (.+) with '$1',
    ids = [
'RU0002867631',
'XS1713519012',
'RU000A0JTD37',
'RU000A0ZZ3U1',
'XS1269959034',
'RU000A0JU8S9',
'RU000A0ZZ2V1',
'RU000A0JXPH0',
'RU000A0JVQ38',
'RU000A0ZYAQ7',
'RU000A0JVCK6',
'RU000A0ZZ0R3',
'RU000A0JWKY8',
'RU000A0ZYHW0',
'XS1143363940',
'RU000A0ZYJX4',
'RU000A0ZZ1F6',
'XS1604405545',
'RU000A0JWYK8',
'RU000A0JVGR2',
'RU000A0JWEK0',
'RU000A0JVFE2',
'RU000A0JTZF1',
'RU000A0JW2T8',
'RU000A0JV3M2',
'RU000A0JV3Z4',
'RU000A0ZYE96',
'RU000A0JWWG0',
'RU000A0JV805',
'RU000A0ZZ0Q5',
'RU000A0JWB59',
'RU000A0JWCW9',
'RU000A0JXVY3',
'RU000A0JVSA3',
'RU000A0ZYXM8',
'RU000A0JWQ45',
'RU000A0JUP63',
'RU000A0JVWJ6',
'RU000A0JWF71',
'RU000A0ZYW94',
'RU000A0JXPJ6',
'RU000A0JWLJ7',
'RU000A0JWMZ1',
'RU000A0JWN22',
'RU000A0JXKQ2',
'RU000A0JUBH6',
'RU000A0JVU73',
'RU000A0JWKL5',
'RU000A0JW1T0',
'RU000A0JVPN2',
'RU000A0JVPP7',
'RU000A0JVPQ5',
'RU000A0JWV63',
'RU000A0JV2H4',
'RU000A0JWM49',
'RU000A0ZYSS5',
'RU000A0JWX95',
'RU000A0JUK84',
'RU000A0JVM81',
'RU000A0ZYVY7',
'RU000A0JVSY3',
'RU000A0JWB83',
'RU000A0JX8E6',
'RU000A0JVZB6',
'RU000A0JVV49',
'RU000A0JVVR1',
'RU000A0JVPR3',
'RU000A0JTMJ1',
'RU000A0JVRM0',
'RU000A0JXTH2',
'RU000A0JVLH3',
'RU000A0JX3A5',
'RU000A0JTX74',
'RU000A0JXNJ1',
'RU000A0JWK66',
'RU000A0JUAG0',
'RU000A0JXN13',
'RU000A0JVHH1',
'RU000A0JX3X7',
'RU000A0JUN08',
'RU000A0JVF98',
'RU000A0JVCA7',
'RU000A0ZYA74',
'RU000A0JX3H0',
'RU000A0JVLA8',
'RU000A0JWK82',
'RU000A0JW0S4',
'RU000A0JW5E3',
'RU000A0JVKC6',
'RU000A0JTWT9',
'RU000A0ZZ0D3',
'RU000A0JWP38',
'RU000A0JWSU9',
'RU000A0JWSV7',
'RU000A0JWP46',
'RU000A0JXK40',
'RU000A0JVUB7',
'RU000A0JWCM0',
'RU000A0JWR02',
'RU000A0JXRT1',
'RU000A0JUS37',
'RU000A0JUSJ6',
'RU000A0JUH89',
'RU000A0JV8U4',
'RU000A0JVKK9',
'XS0088543193',
'RU000A0JWFE0',
'RU000A0JW1V6',
'RU000A0JW1Z7',
'RU000A0JV2J0',
'RU000A0JWDN6',
'RU000A0JVZE0',
'RU000A0JW1G7',
'RU000A0JXQQ9',
'RU000A0JWMM9',
'RU000A0ZYL55',
'RU000A0JVT76',
'RU000A0JVUL6',
'RU000A0JVS10',
'RU000A0JVL33',
'RU000A0JUXW9',
'RU000A0JVYK0',
'RU000A0JWBH2',
'RU000A0JWVT5',
'RU000A0JRJS2',
'RU000A0JRJT0',
'RU000A0JRJY0',
'RU000A0JVVA7',
'RU000A0JU6G8',
'RU000A0JWWX5',
'RU000A0JWBP5',
'RU000A0JVQX9',
'RU000A0JVQY7',
'RU000A0JVUK8',
'RU000A0JVUJ0',
'XS1434175730',
'RU000A0JXP29',
'RU000A0ZYBA9',
'RU000A0JVTA1',
'RU000A0ZYLK7',
'RU000A0JTX09',
'RU000A0JVEH8',
'RU000A0JVGC4',
'RU000A0JVGD2',
'RU000A0JVK00',
'RU000A0JVUY9',
'RU000A0JQXQ9',
'RU000A0JVRN8',
'RU000A0JUWV3',
'RU000A0JUWU5',
'RU000A0JVUD3',
'RU000A0JVSW7',
'RU000A0JUX89',
'RU000A0JVVV3',
'RU000A0JVVW1',
'RU000A0JVWL2',
'RU000A0JUWJ8',
'RU000A0JR0K8',
'RU000A0JR0J0',
'RU000A0JS926',
'RU000A0JWGW0',
'RU000A0JTF50',
'RU000A0JTPD7',
'RU000A0JXFC2',
'RU000A0JVUH4',
'RU000A0JVU65',
'RU000A0JVUW3',
'RU000A0JXTN0',
'RU000A0JVPJ0',
'RU000A0JURM2',
'RU000A0JVP21',
'RU000A0JXYE9',
'RU000A0JXYG4',
'RU000A0JXYH2',
'RU000A0JVNB2',
'RU000A0JVHF5',
'RU000A0JVZC4',
'RU000A0JVMD0',
'RU000A0JVM99',
'RU000A0JVMB4',
'RU000A0JVU08',
'RU000A0JVG97',
'RU000A0JVGB6',
'RU000A0JQCR1',
'RU000A0JWX46',
'RU000A0JUJG1',
'RU000A0JW1B8',
'RU000A0JVEQ9',
'RU000A0JVFD4',
'RU000A0JXUU3',
'RU000A0ZYJ26',
'RU000A0JTPG0',
'RU000A0JWF22',
'RU000A0JU2F9',
'RU000A0JUU25',
'RU000A0JVW22',
'RU000A0JWPF6',
'RU000A0ZYB81',
'RU000A0ZYL30',
'RU000A0ZYLR2',
'RU000A0JXRF0',
'RU000A0JWX79',
'RU000A0JWEG8',
'RU000A0JUH97',
'RU000A0JXW46',
'RU000A0JU7L6',
'XS1654237129',
'RU000A0JU0N7',
'RU000A0JXPT5',
'RU000A0JTH82',
'RU000A0JXTG4',
'RU000A0JUW23',
'RU000A0JW3A6',
'RU000A0JVUX1',
'RU000A0JW5H6',
'RU000A0JVWN8',
'RU000A0JS264',
'RU000A0JVDR9',
'RU000A0JVLE0',
'RU000A0JVLF7',
'RU000A0JVLG5',
'RU000A0JWLG3',
'RU000A0JVKF9',
'RU000A0JVWT5',
'RU000A0JUWK6',
'RU000A0JVEY3',
'RU000A0JVFS2',
'RU000A0JVFX2',
'RU000A0JVGJ9',
'RU000A0JVGK7',
'RU000A0JVBS1',
'RU000A0JWVL2',
'RU000A0JTR72',
'RU000A0JTQB9',
'RU000A0JTTV1',
'RU000A0JQRD9',
'RU000A0JU146',
'RU000A0JVWM0',
'RU000A0ZYU39',
'RU000A0JWSQ7',
'RU000A0JWCK4',
'RU000A0JWXQ7',
'RU000A0JW6P7',
'RU000A0JW5C7',
'RU000A0JVYM6',
'RU000A0JVYL8',
'RU000A0JUVM4',
'RU000A0ZYJT2',
'RU000A0JXQ51',
'RU000A0JVHX8',
'RU000A0JX2K6',
'RU000A0JWVB3',
'RU000A0JWN63',
'RU000A0JVYN4',
'RU000A0JVYP9',
'RU000A0JWDB1',
'RU000A0JWWJ4',
'RU000A0JWWH8',
'RU000A0ZYEM8',
'RU000A0JU2N3',
'RU000A0JUWB5',
'RU000A0JUWT7',
'RU000A0JUR46',
'RU000A0JXT17',
'RU000A0JVGY8',
'RU000A0JUMW2',
'RU000A0JRKD2',
'RU000A0JRKM3',
'RU000A0ZYG37',
'RU000A0JXQ93',
'RU000A0JVZ94',
'RU000A0JRKC4',
'RU000A0JVZJ9',
'RU000A0JUQ13',
'RU000A0JUQ21',
'RU000A0JVP39',
'RU000A0JUN81',
'RU000A0JVW71',
'XS0089375249',
'RU000A0JWN89',
'RU000A0JXXV5',
'RU000A0JRZ74',
'RU000A0JXUT5',
'RU000A0JQ8V9',
'RU000A0JW167',
'RU000A0JW175',
'RU000A0JWST1',
'RU000A0JV573',
'RU000A0JUW31',
'RU000A0JUW72',
'RU000A0JXNB8',
'RU000A0JWC25',
'RU000A0JWF30',
'RU000A0JV508',
'RU000A0JW506',
'RU000A0JTXR1',
'RU000A0JWGS8',
'RU000A0JUQN2',
'RU000A0ZYLD2',
'RU000A0JS1S8',
'RU000A0JVFF9',
'RU000A0JTR80',
'RU000A0JWRH8',
'RU000A0JS1J7',
'RU000A0ZYLB6',
'RU000A0JUJP2',
'RU000A0JWLW0',
'RU000A0JUR04',
'RU000A0JV4S7',
'RU000A0ZYHU4',
'RU000A0ZYH51',
'RU000A0JUD34',
'RU000A0JXE06',
'RU000A0JVWD9',
'RU000A0JVWE7',
'RU000A0JUPE3',
'RU000A0JV664',
'RU000A0JWBF6',
'RU000A0JWBE9',
'RU000A0JWG96',
'RU000A0JV375',
'RU000A0JWGC2',
'RU000A0JWGD0',
'RU000A0JW9G0',
'RU000A0JWWR7',
'RU000A0JXPU3',
'RU000A0JQK64',
'RU000A0JQK72',
'RU000A0JVXZ0',
'RU000A0JUMN1',
'RU000A0JX108',
'RU000A0JU1P0',
'RU000A0JUKX4',
'RU000A0JU807',
'RU000A0JWKP6',
'RU000A0JVTM6',
'RU000A0JQAL8',
'RU000A0JW118',
'RU000A0JXJE0',
'RU000A0JXW87',
'RU000A0JWU98',
'RU000A0JVE40',
'RU000A0JWK74',
'RU000A0JXY44',
'RU000A0JVYD5',
'RU000A0JVE57',
'RU000A0JX439',
'RU000A0JWKQ4',
'RU000A0JUML5',
'RU000A0JS3M7',
'RU000A0JS3L9',
'RU000A0JT3J2',
'RU000A0JUQB7',
'RU000A0JXQJ4',
'RU000A0JVPS1',
'RU000A0JUNU4',
'RU000A0ZZ0L6',
'RU000A0JWDU1',
'RU000A0JWBN0',
'RU000A0JVS36',
'RU000A0JWT91',
'RU000A0JUTQ9',
'RU000A0JUQ54',
'RU000A0JV755',
'RU000A0JVD41',
'RU000A0JWH87',
'RU000A0JVQT7',
'RU000A0JXLM9',
'RU000A0JX2S9',
'RU000A0JUNK5',
'RU000A0JVD17',
'RU000A0JWEC7',
'RU000A0JUUB9',
'RU000A0JTYT5',
'RU000A0JWBK6',
'RU000A0JWWW7',
'RU000A0JXVB1',
'RU000A0ZYEB1',
'RU000A0JUKA2',
'RU000A0JUUG8',
'RU000A0JUQ96',
'RU000A0JV9Q0',
'RU000A0JUZZ7',
'RU000A0JW5B9',
'RU000A0ZZ2W9',
'RU000A0JV7G5',
'RU000A0JRJB8',
'RU000A0JRJL7',
'RU000A0JVZK7',
'RU000A0JWMJ5',
'RU000A0JXUH0',
'RU000A0JWHT4',
'RU000A0JW126',
'RU000A0JV334',
'RU000A0JWCB3',
'RU000A0JWNB0',
'RU000A0JV0U1',
'RU000A0JU8W1',
'RU000A0JWEZ8',
'RU000A0JWD57',
'RU000A0JWC82',
'RU000A0JWAT9',
'RU000A0JWZT6',
'RU000A0JVZP6',
'RU000A0JWGT6',
'RU000A0JRTT9',
'RU000A0JX009',
'RU000A0JWL32',
'RU000A0JWK58',
'RU000A0JTY40',
'RU000A0ZYDA5',
'RU000A0JRJV6',
'RU000A0JRK22',
'RU000A0JX017',
'RU000A0JVZA8',
'RU000A0JX0Y1',
'RU000A0JX1A9',
'RU000A0JWWM8',
'RU000A0ZYFS2',
'RU000A0JU9K4',
'RU000A0JU898',
'RU000A0JWLE8',
'RU000A0JWLD0',
'RU000A0JXQM8',
'RU000A0JWTU7',
'RU000A0JV4P3',
'RU000A0JWHW8',
'RU000A0JUVG6',
'RU000A0JRHF3',
'RU000A0JRHG1',
'RU000A0JUQF8',
'RU000A0JX0L8',
'RU000A0JWNJ3',
'RU000A0JU880',
'RU000A0JWEU9',
'RU000A0JV2C5',
'RU000A0JXLR8',
'RU000A0JRUY7',
'RU000A0JRV52',
'RU000A0JV3L4',
'RU000A0JVC59',
'RU000A0JWEB9',
'RU000A0JUQH4',
'RU000A0JVYJ2',
'RU000A0JV4N8',
'RU000A0JUNL3',
'RU000A0JUQP7',
'RU000A0JW316',
'RU0002867854',
'RU000A0JTHF9',
'RU000A0JU278',
'RU000A0JWPZ4',
'RU000A0JV0T3',
'RU000A0JQAM6',
'RU000A0JS4Z7',
'RU000A0ZYU54',
'RU000A0JUPW5',
'RU000A0JX2L4',
'RU000A0JVUR3',
'RU000A0JVRQ1',
'RU000A0JWJX2',
'RU000A0JPTJ4',
'RU000A0JVJ94',
'RU000A0JVJ45',
'RU000A0JXRL8',
'RU000A0JXSR3',
'RU000A0JWGV2',
'RU000A0JVT43',
'RU000A0JU1Q8',
'RU000A0ZYZS0',
'RU000A0JXMB0',
'RU000A0JWYJ0',
'RU000A0JWKZ5',
'RU000A0JUVT9',
'RU000A0JUWW1',
'RU000A0JUX30',
'RU000A0JUWA7',
'RU000A0JUXT5',
'RU000A0JUYC9',
'RU000A0JWHN7',
'RU000A0JQHM1',
'RU000A0JUP89',
'RU000A0JWMT4',
'RU000A0JX0P9',
'RU000A0JWGG3',
'RU000A0JUT69',
'RU000A0JRVU3',
'RU000A0JWTW3',
'RU000A0JWTX1',
'RU000A0JXD07',
'RU000A0JWKN1',
'RU000A0JV4Q1',
'RU000A0JX1C5',
'RU000A0JWWQ9',
'RU000A0JXTX9',
'RU000A0JWH46',
'RU000A0JWKA8',
'RU000A0JU195',
'RU000A0JWZY6',
'RU000A0JW1K9',
'RU000A0JWK90',
'RU000A0JXVS5',
'RU000A0JRTN2',
'RU000A0JXPG2',
'RU000A0JS6M0',
'RU000A0JWHU2',
'RU000A0JXK99',
'RU000A0JXHE4',
'RU000A0JWUB5',
'RU000A0JWU80',
'RU000A0JS4J1',
'RU000A0JS4K9',
'RU000A0JS4L7',
'RU000A0JWZ10',
'RU000A0JWKB6',
'RU000A0JT403',
'RU000A0JWK41',
'RU000A0JXLX6',
'RU000A0JVS93',
'RU000A0JX2F6',
'RU000A0JX2D1',
'RU000A0JWYQ5',
'RU000A0ZYQY7',
'RU000A0JWZ77',
'RU000A0JWY29',
'RU000A0JX1T9',
'RU000A0JX4Q9',
'RU000A0JWPV3',
'RU000A0JVG89',
'RU000A0JT6B2',
'RU000A0JUTB1',
'RU000A0JWPL4',
'RU000A0JWVS7',
'RU000A0JWXF0',
'RU000A0JVU32',
'RU000A0JS1F5',
'RU000A0JXPD9',
'RU000A0JX0U9',
'RU000A0JVER7',

    ]
    for id in ids:
        try:
            result = get_rusbonds(id)
        except Exception as exception:
            result = dict(exception=traceback.format_exc(-1).replace('\n', ' '))
        print(id, dict_to_str(result, separator='\t', format='%s\t%s'))